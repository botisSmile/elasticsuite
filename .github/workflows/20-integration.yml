name: Integration

on:
    pull_request_target:
        branches:
            - 2.8.x
        types: [review_requested, ready_for_review]

    push:
        branches:
            - 2.8.x

jobs:
    build:
        runs-on: ubuntu-18.04
        name: 'Integration'
        services:
            mysql:
                image: docker://mysql:5.7
                env:
                    MYSQL_ROOT_PASSWORD: magento2
                    MYSQL_DATABASE: magento2
                ports:
                    - 3306:3306
                options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
            elasticsearch:
                image: docker://magento/magento-cloud-docker-elasticsearch:6.8-1.2.2
                ports:
                    - 9200:9200
                options: -e="discovery.type=single-node" --health-cmd="curl http://localhost:9200/_cluster/health" --health-interval=10s --health-timeout=5s --health-retries=10

        strategy:
            matrix:
                php-versions: ['7.2', '7.3']
                magento-versions: ['2.3.2', '2.3.3-p1', '2.3.4-p2']
                magento-editions: ['community', 'enterprise']
                exclude:
                    - php-versions: '7.3'
                      magento-versions: '2.3.2'
                    - php-versions: '7.2'
                      magento-versions: '2.3.3-p1'
                    - php-versions: '7.2'
                      magento-versions: '2.3.4-p2'

        env:
            magento-directory: /var/www/magento
            MAGENTO_USERNAME: ${{ secrets.MAGENTO_USERNAME }}
            MAGENTO_PASSWORD: ${{ secrets.MAGENTO_PASSWORD }}

        steps:
            - name: "[Init] Checkout"
              uses: actions/checkout@v2
              with:
                  ref: ${{ github.event.pull_request.head.sha }}

            - name: "[Init] Checkout full repository to be used as a composer repository"
              uses: actions/checkout@v2
              with:
                  fetch-depth: 0
                  path: repository

            - name: "[Init] Setup PHP"
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php-versions }}
                  extensions: hash, iconv, mbstring, intl, bcmath, ctype, gd, pdo, mysql, curl, zip, dom, sockets, soap, openssl, simplexml, xsl
                  ini-values: post_max_size=256M, max_execution_time=180

            - name: "[Init] Disable xdebug"
              env:
                  version: ${{ matrix.php-versions }}
              run: sudo phpdismod xdebug

            - name: "[Init] Add php-fpm"
              env:
                  version: ${{ matrix.php-versions }}
              run: |
                sudo apt-get install -y php$version-fpm
                sudo service php$version-fpm start
                sudo cp /usr/sbin/php-fpm$version /usr/bin/php-fpm
                sudo service php$version-fpm start
                sudo service php$version-fpm status

            - name: "[Init] Remove hhvm if installed"
              run: sudo apt-get remove hhvm --ignore-missing

            - name: "[Init] Setup Apache with PHP-FPM"
              env:
                  MAGENTO_ROOT: ${{ env.magento-directory }}
                  version: ${{ matrix.php-versions }}
              run: |
                sudo apt-get -qq update
                sudo apt-get -qq install apache2
                sudo a2enmod rewrite actions alias proxy proxy_fcgi
                sudo usermod -a -G www-data $USER
                sudo cp -f Resources/tests/apache/apache.conf /etc/apache2/sites-available/000-default.conf
                sudo mkdir -p $MAGENTO_ROOT
                sudo chown -R $USER:www-data $MAGENTO_ROOT
                sudo sed -e "s?%MAGENTO_ROOT%?$(readlink -f $MAGENTO_ROOT)?g" --in-place /etc/apache2/sites-available/000-default.conf
                sudo sed -e "s?%PHP_VERSION%?$version?g" --in-place /etc/apache2/sites-available/000-default.conf
                sudo apachectl configtest
                sudo systemctl restart apache2
                sudo service apache2 status

            - name: "[Init] Prepare GraphQL test suite"
              run: |
                sudo chown $USER -R /usr/local/lib/node_modules
                npm install -g graphqurl

            - name: "[Init] Downgrade Composer"
              run: composer self-update --1

            - name: "[Init] Optimize Composer"
              run : composer global require hirak/prestissimo:0.3.10

            - name: "[Init] Determine composer cache directory"
              id: composer-cache-directory
              run: "echo \"::set-output name=directory::$(composer config cache-dir)\""

            - name: "[Init] Cache Composer cache"
              id: composer-cache
              uses: actions/cache@v2
              with:
                  path: ${{ steps.composer-cache-directory.outputs.directory }}
                  key: composer-${{ matrix.php-versions }}-${{ matrix.magento-editions }}-${{ matrix.magento-versions }}
                  restore-keys: |
                      composer-${{ matrix.php-versions }}-${{ matrix.magento-editions }}-${{ matrix.magento-versions }}
                      composer-${{ matrix.php-versions }}-${{ matrix.magento-editions }}-
                      composer-${{ matrix.php-versions }}-
                      composer-

            - name: "[Init] Cache Sample data repo"
              id: sampledata-cache
              uses: actions/cache@v2
              with:
                  path: ${{github.workspace}}/data
                  key: sampledata-${{ matrix.php-versions }}-${{ matrix.magento-editions }}-${{ matrix.magento-versions }}
                  restore-keys: |
                      sampledata-${{ matrix.php-versions }}-${{ matrix.magento-editions }}-${{ matrix.magento-versions }}
                      sampledata-${{ matrix.php-versions }}-${{ matrix.magento-editions }}-
                      sampledata-${{ matrix.php-versions }}-
                      sampledata-

            - name: "[Init] Prepare Sample Data local clones"
              if: steps.sampledata-cache.outputs.cache-hit != 'true'
              working-directory: ${{ env.magento-directory }}
              run: |
                composer config --global github-protocols https
                git config --global url."https://github.com/PMET-public".insteadOf "git@github.com:PMET-public"
                if [ ! -d "$GITHUB_WORKSPACE/data/PMET-public" ]; then
                  rm -rf "$GITHUB_WORKSPACE/data/PMET-public"
                  git clone https://github.com/PMET-public/module-catalog-sample-data-venia.git "$GITHUB_WORKSPACE/data/PMET-public/module-catalog-sample-data-venia"
                  git clone https://github.com/PMET-public/module-configurable-sample-data-venia.git "$GITHUB_WORKSPACE/data/PMET-public/module-configurable-sample-data-venia"
                  git clone https://github.com/PMET-public/sample-data-media-venia.git "$GITHUB_WORKSPACE/data/PMET-public/sample-data-media-venia"
                fi

            - name: "[Init] Prepare Sample Data local repos"
              working-directory: ${{ env.magento-directory }}
              run: |
                composer config --global --no-interaction --ansi repositories.module-catalog-sample-data-venia git "$GITHUB_WORKSPACE/data/PMET-public/module-catalog-sample-data-venia"
                composer config --global --no-interaction --ansi repositories.module-configurable-sample-data-venia git "$GITHUB_WORKSPACE/data/PMET-public/module-configurable-sample-data-venia"
                composer config --global --no-interaction --ansi repositories.sample-data-media-venia git "$GITHUB_WORKSPACE/data/PMET-public/sample-data-media-venia"
                composer config --global repositories

            - name: "[Init] Prepare Elasticsuite repo"
              working-directory: ${{ env.magento-directory }}
              run: |
                  composer config --global --no-interaction --ansi repositories.elasticsuite-premium git "$GITHUB_WORKSPACE/repository"
                  composer config --global repositories

            - name: "[Init] Cache Magento install"
              id: magento-cache
              uses: actions/cache@v2
              with:
                  path: ${{ env.magento-directory }}
                  key: ${{ matrix.php-versions }}-${{ matrix.magento-editions }}-${{ matrix.magento-versions }}
                  restore-keys: |
                      ${{ matrix.php-versions }}-${{ matrix.magento-editions }}-${{ matrix.magento-versions }}

            - name: "[Init] Prepare credentials"
              if: ${{env.MAGENTO_USERNAME}} != 0
              run: composer config -g http-basic.repo.magento.com "$MAGENTO_USERNAME" "$MAGENTO_PASSWORD"

            - name: "[Init] Prepare Magento install if needed"
              if: steps.magento-cache.outputs.cache-hit == 'true'
              working-directory: ${{ env.magento-directory }}
              run: |
                rm -rf app/etc/env.php app/etc/config.php
                composer config discard-changes true
                composer remove magento/module-catalog-sample-data-venia --no-update --no-interaction
                composer remove magento/module-configurable-sample-data-venia --no-update --no-interaction
                composer remove magento/sample-data-media-venia --no-update --no-interaction
                composer remove smile/elasticsuite --no-update --no-interaction
                composer update --no-interaction --ignore-platform-reqs
                composer config discard-changes false

            - name: "[Init] Install proper version of Magento through Composer"
              if: steps.magento-cache.outputs.cache-hit != 'true'
              env:
                  MAGENTO_VERSION: ${{ matrix.magento-versions }}
                  MAGENTO_EDITION: ${{ matrix.magento-editions }}
                  STABILITY: "--stability=stable"
                  MAGENTO_ROOT: ${{ env.magento-directory }}
              run: |
                sudo rm -rf $MAGENTO_ROOT
                sudo mkdir -p $MAGENTO_ROOT
                sudo chown -R $USER:www-data $MAGENTO_ROOT
                composer create-project --repository-url=https://repo.magento.com magento/project-$MAGENTO_EDITION-edition=$MAGENTO_VERSION $STABILITY $MAGENTO_ROOT --quiet

            - name: "[Init] Add current build of Elasticsuite Premium"
              working-directory: ${{ env.magento-directory }}
              run: |
                composer require --dev "smile/elasticsuite-premium:${GITHUB_BASE_REF:-${GITHUB_REF##*/}}-dev" --ignore-platform-reqs
                cp -R $GITHUB_WORKSPACE/* vendor/smile/elasticsuite-premium/

            - name: "[Init] Fix Magento directory permissions"
              env:
                  MAGENTO_ROOT: ${{ env.magento-directory }}
              working-directory: ${{ env.magento-directory }}
              run: |
                sudo find . -type f -exec chmod 644 {} \;
                sudo find . -type d -exec chmod 755 {} \;
                sudo find var pub/static pub/media app/etc generated/ -type f -exec chmod g+w {} \;
                sudo find var pub/static pub/media app/etc generated/ -type d -exec chmod g+ws {} \;
                sudo chown -R runner:www-data .
                sudo chmod u+x bin/magento

            - name: "[Test] Install Magento"
              working-directory: ${{ env.magento-directory }}
              env:
                  MAGENTO_VERSION: ${{ matrix.magento-versions }}
                  MAGENTO_EDITION: ${{ matrix.magento-editions }}
                  M2SETUP_DB_HOST: "0.0.0.0"
                  M2SETUP_DB_NAME: "magento2"
                  M2SETUP_DB_USER: "magento2"
                  M2SETUP_DB_PASSWORD: "magento2"
                  M2SETUP_ADMIN_EMAIL: "elasticsuite@smile.fr"
                  M2SETUP_ADMIN_USER: "admin"
                  M2SETUP_ADMIN_PASSWORD: "Smile1234"
                  M2SETUP_ADMIN_FIRSTNAME: "Elastic"
                  M2SETUP_ADMIN_LASTNAME: "Suite"
              run: |
                INSTALL_COMMAND="php bin/magento setup:install --db-host=$M2SETUP_DB_HOST --db-name=$M2SETUP_DB_NAME --db-password=$M2SETUP_DB_PASSWORD --admin-email=$M2SETUP_ADMIN_EMAIL --admin-user=$M2SETUP_ADMIN_USER --admin-firstname=$M2SETUP_ADMIN_FIRSTNAME --admin-lastname=$M2SETUP_ADMIN_LASTNAME --admin-password=$M2SETUP_ADMIN_PASSWORD"
                function version { echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'; }
                # Magento >= 2.4.0 will test connection to Elasticsearch
                if [ $(version $MAGENTO_VERSION) -ge $(version "2.4.0") ]; then
                  INSTALL_COMMAND="$INSTALL_COMMAND --elasticsearch-host=elasticsearch"
                  INSTALL_COMMAND="$INSTALL_COMMAND --elasticsearch-port=9200"
                fi

                DISABLE_MODULES=""
                if [ "$MAGENTO_EDITION" = "community" ]; then
                  DISABLE_MODULES="${DISABLE_MODULES}Smile_ElasticsuiteCatalogOptimizerCustomerSegment,Smile_ElasticsuiteAbCampaignCustomerSegment,"
                fi

                if [ $(version $MAGENTO_VERSION) -lt $(version "2.3.4") ]; then
                  DISABLE_MODULES="${DISABLE_MODULES}Smile_ElasticsuiteRecommenderGraphQl"
                fi

                if [ "$DISABLE_MODULES" != "" ]; then
                  DISABLE_MODULES=$(sed 's/,$//' <<< $DISABLE_MODULES)
                  INSTALL_COMMAND="$INSTALL_COMMAND --disable-modules=$DISABLE_MODULES"
                fi

                $INSTALL_COMMAND --quiet

            - name: "[Test] Setup Upgrade"
              working-directory: ${{ env.magento-directory }}
              run: php bin/magento setup:upgrade --quiet

            - name: "[Test] Reindex"
              working-directory: ${{ env.magento-directory }}
              run: php bin/magento index:reindex

            - name: "[Test] Cache Flush"
              working-directory: ${{ env.magento-directory }}
              run: php bin/magento cache:flush

            - name: "[Init] Remove Customer Segment modules for compiling."
              working-directory: ${{ env.magento-directory }}
              env:
                  MAGENTO_EDITION: ${{ matrix.magento-editions }}
              run: |
                  if [ "$MAGENTO_EDITION" = "community" ]; then
                      cp -rf vendor/smile/elasticsuite-premium/src/module-elasticsuite-catalog-optimizer-customer-segment/registration.php vendor/smile/elasticsuite-premium/src/module-elasticsuite-catalog-optimizer-customer-segment/registration.php.bak
                      rm -rf vendor/smile/elasticsuite-premium/src/module-elasticsuite-catalog-optimizer-customer-segment/registration.php
                      touch vendor/smile/elasticsuite-premium/src/module-elasticsuite-catalog-optimizer-customer-segment/registration.php
                      ls -ail vendor/smile/elasticsuite-premium/src/module-elasticsuite-catalog-optimizer-customer-segment
                      cp -rf vendor/smile/elasticsuite-premium/src/module-elasticsuite-ab-campaign-customer-segment/registration.php vendor/smile/elasticsuite-premium/src/module-elasticsuite-ab-campaign-customer-segment/registration.php.bak
                      rm -rf vendor/smile/elasticsuite-premium/src/module-elasticsuite-ab-campaign-customer-segment/registration.php
                      touch vendor/smile/elasticsuite-premium/src/module-elasticsuite-ab-campaign-customer-segment/registration.php
                      ls -ail vendor/smile/elasticsuite-premium/src/module-elasticsuite-ab-campaign-customer-segment
                  fi

            - name: "[Init] Remove Recommender GraphQl module for compiling on old Magento2 versions."
              working-directory: ${{ env.magento-directory }}
              env:
                  MAGENTO_VERSION: ${{ matrix.magento-versions }}
              run: |
                  function version { echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'; }
                  if [ $(version $MAGENTO_VERSION) -lt $(version "2.3.4") ]; then
                      cp -rf vendor/smile/elasticsuite-premium/src/module-elasticsuite-recommender-graph-ql/registration.php vendor/smile/elasticsuite-premium/src/module-elasticsuite-recommender-graph-ql/registration.php.bak
                      rm -rf vendor/smile/elasticsuite-premium/src/module-elasticsuite-recommender-graph-ql/registration.php
                      touch vendor/smile/elasticsuite-premium/src/module-elasticsuite-recommender-graph-ql/registration.php
                      ls -ail vendor/smile/elasticsuite-premium/src/module-elasticsuite-recommender-graph-ql
                  fi

            - name: "[Test] Compile"
              working-directory: ${{ env.magento-directory }}
              run: php bin/magento setup:di:compile

            - name: "[Test] Publish statics"
              working-directory: ${{ env.magento-directory }}
              run: php bin/magento setup:static-content:deploy -f

            - name: "[Test] Data : Require"
              working-directory: ${{ env.magento-directory }}
              run: |
                composer config discard-changes true
                composer require magento/module-catalog-sample-data-venia:dev-master@dev --no-update --no-interaction --ignore-platform-reqs
                composer require magento/module-configurable-sample-data-venia:dev-master@dev --no-update --no-interaction --ignore-platform-reqs
                composer require magento/sample-data-media-venia:dev-master@dev --no-update --no-interaction --ignore-platform-reqs
                composer update --no-interaction --ignore-platform-reqs

            - name: "[Init] Data : Prepare for old Magento versions"
              working-directory: ${{ env.magento-directory }}
              env:
                  MAGENTO_VERSION: ${{ matrix.magento-versions }}
              run: |
                  function version { echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'; }
                  if [ $(version $MAGENTO_VERSION) -lt $(version "2.3.5") ]; then
                      sed -i '/^<\/config>/i <preference for="Magento\\Framework\\Filesystem\\DriverInterface" type="Magento\\Framework\\Filesystem\\Driver\\File" />' app/etc/di.xml
                      sed -i 's/xdebug_disable/\/\/xdebug_disable/g' vendor/magento/magento2-functional-testing-framework/src/Magento/FunctionalTestingFramework/_bootstrap.php
                  fi

            - name: "[Test] Data : Install"
              working-directory: ${{ env.magento-directory }}
              run: php bin/magento setup:upgrade --keep-generated

            - name: "[Test] Data : Index"
              working-directory: ${{ env.magento-directory }}
              run: php bin/magento index:reindex

            - name: "[Test] Web : Homepage"
              run: |
                echo "==> Testing homepage..."
                curl_status=`curl --silent --connect-timeout 8 --output /dev/null -LI http://localhost/ -LI -w "%{http_code}\n"`
                echo ${curl_status}
                if [[ ${curl_status} -ge 400 ]];
                then
                  cat /var/log/apache2/apache-error.log
                  exit 2;
                fi;

            - name: "[Test] Web : Catalogsearch"
              run: |
                echo "==> Testing catalogsearch..."
                curl_status=`curl --silent --connect-timeout 8 --output /dev/null -LI http://localhost/catalogsearch/result/?q=top -LI -w "%{http_code}\n"`
                echo ${curl_status}
                if [[ ${curl_status} -ge 400 ]];
                then
                  cat /var/log/apache2/apache-error.log
                  exit 2;
                fi;

            - name: "[Test] Web : Autocomplete"
              run: |
                echo "==> Testing Autocomplete..."
                curl_status=`curl --silent --connect-timeout 8 --output /dev/null -LI http://localhost/search/ajax/suggest/?q=top -LI -w "%{http_code}\n"`
                echo ${curl_status}
                if [[ ${curl_status} -ge 400 ]];
                then
                  cat /var/log/apache2/apache-error.log
                  exit 2;
                fi;

            - name: "[Test] GraphQl : Schema"
              run: |
                echo "==> Testing GraphQL Schema..."
                curl -i -X POST http://localhost/graphql -H "Content-Type: application/json" -d @$GITHUB_WORKSPACE/Resources/tests/graphql/introspection_query.json

            - name: "[Test] GraphQl : Search"
              env:
                  MAGENTO_VERSION: ${{ matrix.magento-versions }}
              run: |
                function version { echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'; }
                if [ $(version $MAGENTO_VERSION) -lt $(version "2.3.5") ]; then
                  sed -i -e '/aggregations/,/items/{/aggregations/!{/items/!d}}' -e '/aggregations/d' Resources/tests/graphql/search/query.gql
                fi
                echo "==> Testing Search"
                gq \
                http://localhost/graphql \
                -l \
                -H "Content-Type: application/json" \
                --variablesFile="$GITHUB_WORKSPACE/Resources/tests/graphql/search/variables.json" \
                --queryFile="$GITHUB_WORKSPACE/Resources/tests/graphql/search/query.gql"

            - name: "[Test] GraphQl : Category"
              env:
                  MAGENTO_VERSION: ${{ matrix.magento-versions }}
              run: |
                function version { echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'; }
                if [ $(version $MAGENTO_VERSION) -lt $(version "2.3.5") ]; then
                  sed -i -e '/aggregations/,/items/{/aggregations/!{/items/!d}}' -e '/aggregations/d' Resources/tests/graphql/category/query.gql
                fi
                echo "==> Testing Search"
                gq \
                http://localhost/graphql \
                -l \
                -H "Content-Type: application/json" \
                --variablesFile="$GITHUB_WORKSPACE/Resources/tests/graphql/search/variables.json" \
                --queryFile="$GITHUB_WORKSPACE/Resources/tests/graphql/search/query.gql"

            - name: "[Test] GraphQl : Product Detail"
              run: |
                echo "==> Testing Search"
                gq \
                http://localhost/graphql \
                -l \
                -H "Content-Type: application/json" \
                --variablesFile="$GITHUB_WORKSPACE/Resources/tests/graphql/productdetail/variables.json" \
                --queryFile="$GITHUB_WORKSPACE/Resources/tests/graphql/productdetail/query.gql"

            - name: "[End] Job failed, gathering logs"
              env:
                  MAGENTO_ROOT: ${{ env.magento-directory }}
              if: ${{ failure() }}
              run: |
                  tail -n 100 /var/log/apache2/apache-error.log
                  tail -n 100 $MAGENTO_ROOT/var/log/*.log
